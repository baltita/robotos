{"version":3,"sources":["components/card/card-componenet.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","changeHandle","type","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,iBAA2DC,IAAI,YACvE,+BAAKL,EAAMG,QAAQG,KAAnB,OACA,4BAAIN,EAAMG,QAAQI,YCJjBC,EAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJjDO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACjB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgCPG,E,kDAlCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAaRiB,aAAe,SAAAC,GACT,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAb1C,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJE,E,qDAQnB,WAAqB,IAAD,OAClBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAO9C,WACI,MAAgCC,KAAKN,MAA9Bd,EAAP,EAAOA,SAAUW,EAAjB,EAAiBA,YACXU,EAAmBrB,EAASsB,QAAO,SAAA5B,GAAO,OAAIA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBACtG,OACI,sBAAK/B,UAAU,MAAf,UACI,8CACA,cAAC,EAAD,CACIW,YAAc,mBACdC,aAAgBgB,KAAKZ,eAEzB,cAAC,EAAD,CAAUR,SAAUqB,W,GA7BdI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9abb871a.chunk.js","sourcesContent":["import React from \"react\";\nimport './card-style.css'\n\nexport const Card = props => {\n    return (\n        <div className='card-container'>\n            <img src={`https://robohash.org/${props.monster.id}?size=180x180`} alt=\"monster\"/>\n            <h2>{props.monster.name} </h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from 'react'\nimport './card-list.style.css'\nimport {Card} from \"../card/card-componenet\";\n\nexport const CardList = props => {\n    return (\n        <div className='card-list'>\n            {props.monsters.map(monster => <Card key={monster.id} monster={monster} />)}\n        </div>\n    )\n}","import React from \"react\";\nimport './search-box.style.css';\n\nexport const SearchBox = ({placeholder, changeHandle}) => (\n        <input\n            className='search'\n            type='search'\n            placeholder={placeholder}\n            onChange={changeHandle}\n        />\n    )\n","import { Component} from \"react\";\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = e => {\n        this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n      const {monsters, searchField} = this.state;\n      const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n        <div className=\"App\">\n            <h1>Robot Search</h1>\n            <SearchBox\n                placeholder = 'Search Robots...'\n                changeHandle = {this.handleChange}\n            />\n            <CardList monsters={filteredMonsters}/>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}